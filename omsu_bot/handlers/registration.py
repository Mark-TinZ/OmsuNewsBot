import json
import logging
import sqlalchemy as sa
import sqlalchemy.orm as sorm

from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.chat_action import ChatActionSender
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton

from omsu_bot import utils
import omsu_bot.data.language as lang
from omsu_bot.fsm import HandlerState
from omsu_bot.handlers import RouterHandler, admin
from omsu_bot.handlers import groups
from omsu_bot.handlers.menu import MenuForm
from omsu_bot.database.models import Student, Teacher, User, Group

logger = logging.getLogger(__name__)


class RegistrationForm(StatesGroup):
	greetings_approval = HandlerState(
		text=lang.user_greetings,
		parse_mode="HTML",
		reply_markup=
			InlineKeyboardBuilder()
				.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="approve")
				.as_markup()
	)
	
	warning_approval = HandlerState(
		text=lang.user_registration_warning,
		reply_markup=
			InlineKeyboardBuilder()
				.button(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data="approve")
				.as_markup()
	)

	role_selection = HandlerState(
		text=(
			"üìù –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è...\n\n"
			"–í—ã–±–µ—Ä–∏—Ç–µ *—Ä–æ–ª—å*:"
		),
		reply_markup=
			InlineKeyboardBuilder()
				.button(text="üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç", callback_data="student")
				.button(text="üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="teacher")
				.adjust(2)
				.as_markup()
	)

	### TEACHER REGISTRATION ###
	teacher_auth = HandlerState(
		text=(
			"üë®‚Äçüè´ *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–∞—à *–∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏*:"
		),
		reply_markup=
			InlineKeyboardBuilder()
				.button(text="–û—Ç–º–µ–Ω–∞", callback_data="return")
				.as_markup()
	)

	async def teacher_approval_message(self, bot, state: FSMContext):
		await state.set_state(self)
		data = await state.get_data()
		return dict(
			text=f"üë®‚Äçüè´ *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å*\n*{data['teacher_name']}*\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ *—ç—Ç–æ –≤—ã*",
			reply_markup=InlineKeyboardBuilder()
				.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á", callback_data="change")
				.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")
				.as_markup()
		)

	teacher_approval = HandlerState(message_handler=teacher_approval_message)

	### STUDENT REGISTRATION ###
	@staticmethod
	async def data_approval_message(self, bot, state: FSMContext):
		await state.set_state(self)
		data = await state.get_data()
		course_number = data["groups_course_number"]
		group_name = data["groups_group_name"]

		return dict(
			text=f"üë®‚Äçüéì *–°—Ç—É–¥–µ–Ω—Ç*\nüìö *–ö—É—Ä—Å ‚Ññ{course_number}*\nüíº *–ì—Ä—É–ø–ø–∞: {group_name}*\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
			reply_markup=
				InlineKeyboardBuilder()
				.button(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="change")
				.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")
				.adjust(2)
				.as_markup()
		)

	data_approval = HandlerState(message_handler=data_approval_message)


class Registration(RouterHandler):
	def __init__(self) -> None:
		super().__init__()
		
		router: Router = self.router

		@router.message(CommandStart())
		async def handle_start(msg: Message, state: FSMContext) -> None:
			if await utils.throttling_assert(state): return
			
			if not self.bot.db.is_online():
				await state.clear()
				await msg.answer(text=lang.user_error_database_connection)
				return

			sender = msg.from_user

			sess: sorm.Session = self.bot.db.session

			if sess:
				with sess.begin():
					user: User = sess.execute(sa.select(User).where(User.tg_id == sender.id)).scalar_one_or_none()

			if user:
				await MenuForm.menu_main.message_send(self.bot, state, msg.chat, msg.message_id)
			else:
				await RegistrationForm.greetings_approval.message_send(self.bot, state, msg.chat, msg.message_id)
		
		@router.callback_query(RegistrationForm.greetings_approval)
		async def handle_greetings_approval(call: CallbackQuery, state: FSMContext):
			if call.data == "approve":
				await call.answer()
				await RegistrationForm.warning_approval.message_edit(self.bot, state, call.message)

		@router.callback_query(RegistrationForm.warning_approval)
		async def handle_eula_approval(call: CallbackQuery, state: FSMContext):
			if call.data == "approve":
				await call.answer()
				await RegistrationForm.role_selection.message_edit(self.bot, state, call.message)

		@router.callback_query(RegistrationForm.role_selection)
		async def handle_role_selection(call: CallbackQuery, state: FSMContext):
			if await utils.throttling_assert(state): return
			
			await call.answer()

			match call.data:
				case "student":
					await groups.GroupsForm.course_selection.message_edit(self.bot, state, call.message, title="*üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç*", prev_state=RegistrationForm.role_selection, next_state=RegistrationForm.data_approval)
				case "teacher":
					await RegistrationForm.teacher_auth.message_edit(self.bot, state, call.message)
		
		@router.callback_query(RegistrationForm.teacher_auth)
		async def handle_teacher_auth_call(call: CallbackQuery, state: FSMContext):
			if await utils.throttling_assert(state): return
			
			await call.answer()
			
			if call.data == "return":
				await RegistrationForm.role_selection.message_edit(self.bot, state, call.message)
				return
		
		@router.message(RegistrationForm.teacher_auth)
		async def handle_teacher_auth(msg: Message, state: FSMContext):
			if await utils.throttling_assert(state, count=1, freq=3.0): return
			
			if not msg.text:
				return

			if not self.bot.db.is_online():
				logger.error(f"id={msg.from_user.id}, {lang.user_error_database_connection}")
				await msg.answer(text=lang.user_error_database_connection)
				return

			success = False
			tg_id = msg.from_user.id
			sess: sorm.Session = self.bot.db.session
			with sess.begin():
				teacher = sess.execute(sa.select(Teacher).where(Teacher.tg_authkey == msg.text, Teacher.user_id == sa.null())).scalar_one_or_none()

				if teacher:
					name = teacher.name
					success = True
			
			if success:
				await state.update_data(teacher_name=name, teacher_authkey=msg.text)
				await RegistrationForm.teacher_approval.message_send(self.bot, state, chat=msg.chat, reply_to_message_id=msg.message_id)
			else:
				logger.error(f"id={msg.from_user.id}, *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å* –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞... *–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏*")
				await msg.answer_video_note(FSInputFile("media/video/cat-huh.mp4"))
				ans = await msg.answer(
					text="üë®‚Äçüè´ *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å*\n\n*–ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞...*\n–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ *–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏*\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á –µ—â—ë —Ä–∞–∑",
					parse_mode="Markdown",
					reply_markup=RegistrationForm.teacher_auth.reply_markup
				)
				await utils.register_context(state, ans)

		@router.callback_query(RegistrationForm.teacher_approval)
		async def handle_teacher_approval(call: CallbackQuery, state: FSMContext):
			if await utils.throttling_assert(state): return

			await call.answer()

			c = call.data
			if c == "change":
				await RegistrationForm.teacher_auth.message_edit(self.bot, state, call.message)
				return
			
			if c != "confirm":
				return

			if not self.bot. db.is_online():
				logger.error(f"id={call.message.from_user.id}, {lang.user_error_database_connection}")
				await call.message.edit_text(text=lang.user_error_database_connection)
				return

			data = await state.get_data()
			authkey = data["teacher_authkey"]
			name = data["teacher_name"]

			tg_id = call.from_user.id
			success = False
			sess: sorm.Session = self.bot.db.session
			with sess.begin():
				teacher = sess.execute(sa.select(Teacher).where(Teacher.tg_authkey == authkey, Teacher.user_id == sa.null(), Teacher.name == name)).scalar_one_or_none()

				if teacher:
					settings_dict: dict = dict()
					settings_dict["notifications_enable"] = True
					settings_dict["schedule_view"] = False
					settings_json = json.dumps(settings_dict)
					pk = sess.execute(sa.insert(User).values(tg_id=tg_id, role_id="teacher", settings=settings_json)).inserted_primary_key
					if pk:
						teacher.user_id = pk[0]
						success = True
			
			if success:
				await state.clear()
				await call.message.edit_text(
					text=f"üë®‚Äçüè´ *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å*\n*{name}*\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è",
					parse_mode="Markdown"
				)
			else:
				logger.error(f"id={call.message.from_user.id}, *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å* –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞... *–∫–ª—é—á —É–∂–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω*")
				await call.message.edit_text(
					text="üë®‚Äçüè´ *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å*\n\n*–ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞...*\n–í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ—Ç *–∫–ª—é—á —É–∂–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω*\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á –µ—â—ë —Ä–∞–∑",
					parse_mode="Markdown",
					reply_markup=RegistrationForm.teacher_auth.reply_markup
				)
				async with ChatActionSender.upload_video_note(chat_id=call.chat.id, bot=self.bot.tg):
					video_note = FSInputFile("media/video/cat-huh.mp4")
					await call.message.answer_video_note(video_note)	

		@router.callback_query(RegistrationForm.data_approval)
		async def handle_data_approval(call: CallbackQuery, state: FSMContext):
			if await utils.throttling_assert(state): return
			
			await call.answer()
			c = call.data
			if c == "change":
				await groups.GroupsForm.course_selection.message_edit(self.bot, state, call.message, title="*üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç*", prev_state=RegistrationForm.role_selection, next_state=RegistrationForm.data_approval)
				return
			
			if c != "confirm":
				return
			
			## approved ##

			if not self.bot.db.is_online():
				logger.error(f"id={call.message.from_user.id}, {lang.user_error_database_connection}")
				await call.message.edit_text(text=lang.user_error_database_connection)
				return
			
			data = await state.get_data()
			group_id = data["groups_group_id"]
			group_name = data["groups_group_name"]
			course_number = data["groups_course_number"]

			await state.clear()

			success = False

			tg_id = call.from_user.id
			sess: sorm.Session = self.bot.db.session
			with sess.begin():
				group: Group | None  = sess.execute(sa.select(Group).where(Group.id_ == group_id, Group.is_enabled == True)).scalar_one_or_none()
				if group:
					settings_dict: dict = dict()
					settings_dict["notifications_enabled"] = True
					settings_dict["schedule_view"] = False
					settings_json = json.dumps(settings_dict)
					pk = sess.execute(sa.insert(User).values(tg_id=tg_id, role_id="student", settings=settings_json)).inserted_primary_key
					if pk:
						student = Student(user_id=pk[0], group_id=group_id)
						sess.add(student)
						success = True

			if success:
				await call.message.edit_text(
					text=f"üë®‚Äçüéì *–°—Ç—É–¥–µ–Ω—Ç*\nüìö *–ö—É—Ä—Å ‚Ññ{course_number}*\nüíº *–ì—Ä—É–ø–ø–∞: {group_name}*\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è",
					parse_mode="Markdown"
				)
			else:
				logger.error(f"id={call.message.from_user.id}, –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞...")
				await call.message.edit_text("–ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞...")
				await call.message.answer_video_note(FSInputFile("media/video/error-bd.mp4"))
		



	
